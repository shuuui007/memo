#include <iostream>
#include <vector>
#include <string>
#include "glut.h"
#define _USE_MATH_DEFINES
#include <math.h>
using namespace std;
using std::cin;
using std::cout;
using std::endl;
using std::vector;
using std::string;
using std::pair;

void draw_rect(double x, double y, double wid, double high, double red = 0, double gr = 0, double bl = 0, double linewid = 1) {
	wid /= 2.;
	high /= 2.;
	glLineWidth(linewid);
	glBegin(GL_LINE_LOOP);
	glColor3f(red, gr, bl);

	glVertex2f(x - wid, y - high);
	glVertex2f(x - wid, y + high);

	glVertex2f(x + wid, y + high);
	glVertex2f(x + wid, y - high);
	glEnd();
	glFlush();
}

void draw_painted_rect(double x, double y, double w, double h, const char* text, double red = 1, double gr = 1, double bl = 1,
	double ramkawid = 0, double rr = 0, double rg = 0, double rb = 0, double textotstup_x = 0.1, double textotstup_y = 0.1, double tred = 0, double tgr = 0, double tbl = 0) {
	w /= 2;
	h /= 2;
	glBegin(GL_POLYGON);
	glColor3f(red, gr, bl);
	glVertex2f(x - w, y - h);
	glVertex2f(x - w, y + h);
	glVertex2f(x + w, y + h);
	glVertex2f(x + w, y - h);
	glEnd();

	glLineWidth(ramkawid);
	glBegin(GL_LINE_LOOP);
	if (ramkawid == 0) {
		glColor3f(red, gr, bl);
	}
	else glColor3f(rr, rg, rb);
	glVertex2f(x - w, y - h);
	glVertex2f(x - w, y + h);
	glVertex2f(x + w, y + h);
	glVertex2f(x + w, y - h);
	glEnd();

	glColor3f(tred, tgr, tbl);
	int textLength = strlen(text);
	float textX = x + textotstup_x - w;
	float textY = y + textotstup_y - h;

	glRasterPos2f(textX, textY);
	for (int i = 0; i < textLength; i++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);
	}
	glFlush();
}


void draw_pole() {
	glLineWidth(2.5);
	glBegin(GL_LINES);
	glColor3f(0.5, 0, 0.1);
	for (int i = -4; i <= 4; i += 2) {
		glVertex2f(i, -4);
		glVertex2f(i, 4);

		glVertex2f(-4, i);
		glVertex2f(4, i);
	}
	glEnd();

	for (int i = -3; i <= 3; i += 2) {
		for (int j = -3; j <= 3; j += 2) {
			draw_rect(i, j, 1.6, 1.6, 0.5, 0, 0.1);
		}
	}
	glFlush();
}


struct Point {
	double x;
	double y;
	Point() = default;
	bool operator==(const Point p) {
		return (x == p.x && y == p.y);
	}
	bool operator!=(const Point p) {
		return !(*this == p);
	}
	Point(double x0, double y0) {
		x = x0;
		y = y0;
	}
};

class Button {
private:
	double x;
	double y;
	double width;
	double height;
	const char* text;
public:
	Button() : x(0), y(0), width(0), height(0), text(nullptr) {};
	Button(double x, double y, double width, double height, const char* text) : x(x), y(y), width(width), height(height), text(text) {};

	Point get_center() {
		return Point(x, y);
	}

	void drawButton(double red = 1, double gr = 1, double bl = 1, double ramkawid = 0, double rr = 0, double rg = 0, double rb = 0, 
		double textotstup_x = 0.1, double textotstup_y = 0.1, double tred = 0, double tgr = 0, double tbl = 0) {
		double w = width / 2., h = height / 2.;
		glBegin(GL_POLYGON);
		glColor3f(red, gr, bl);
		glVertex2f(x - w, y - h);
		glVertex2f(x - w, y + h);
		glVertex2f(x + w, y + h);
		glVertex2f(x + w, y - h);
		glEnd();

		glLineWidth(ramkawid);
		glBegin(GL_LINE_LOOP);
		if (ramkawid == 0) {
			glColor3f(red, gr, bl);
		}
		else glColor3f(rr, rg, rb);
		glVertex2f(x - w, y - h);
		glVertex2f(x - w, y + h);
		glVertex2f(x + w, y + h);
		glVertex2f(x + w, y - h);
		glEnd();

		glColor3f(tred, tgr, tbl);
		int textLength = strlen(text);
		float textX = x + textotstup_x - w;
		float textY = y + textotstup_y - h;

		glRasterPos2f(textX, textY);
		for (int i = 0; i < textLength; i++) {
			glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);
		}
		glFlush();
	}

	bool isButtonHovered(Point najatie) {
		double w = width / 2., h = height / 2.;
		return najatie.x >= x - w && najatie.x <= x + w && najatie.y >= y - h && najatie.y <= y + h;
	}

};

enum MenuState{
	MENU,
	PAUSE,
	PLAY,
	PLAYPL1,
	PLAYPL2,
	LOSS,
	WIN
};
MenuState currentMenuState = MENU;
MenuState pastMenuState = MENU;


struct H {
	static vector<Button> button_mas;
	static vector<Button> plitki;
	static vector<int> cards_mas;
	static vector<int> open_cards_mas;
	static int cur_num_pl1;
	static int cur_num_pl2;


};vector<Button> H::button_mas, H::plitki(16); vector<int> H::cards_mas = { 0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0 }, H::open_cards_mas(16, 0); int H::cur_num_pl1 = -1, H::cur_num_pl2 = -1;


void set_button(){
	Button _start(0, 0.7, 1.1, 0.5, "START");
	Button _exit(0, 0, 1.1, 0.5, "EXIT");
	H::button_mas.push_back(_start);
	H::button_mas.push_back(_exit);
	Button _continue(0, 0.7, 1.7, 0.5, "CONTINUE");
	Button _restart(0, 0, 1.7, 0.5, "RESTART");
	Button _exit2(0, -0.7, 1.7, 0.5, "EXIT");
	H::button_mas.push_back(_continue);
	H::button_mas.push_back(_restart);
	H::button_mas.push_back(_exit2);

	int cnt = 0;
	for (int i = 3; i >= -3; i -= 2) {
		for (int j = -3; j <= 3; j += 2) {
			H::plitki[cnt] = Button(j, i, 1, 1, "");
			++cnt;
		}
	}
}

void draw_card(int i) {
	double x = H::plitki[i].get_center().x, y = H::plitki[i].get_center().y;

	if (H::cards_mas[i] == 0) { //круг
		draw_painted_rect(x, y, 2, 2, "", 0.4, 0.8, 1, 2.5, 0.5, 0, 0.1);
		int pointCount = 50;
		const float step = float(2 * M_PI / pointCount), r = 0.7;
		glLineWidth(2.5);
		glBegin(GL_LINE_LOOP);
		glColor3f(0, 0, 0.7);
		for (float angle = 0; angle < float(2 * M_PI); angle += step) {
			glVertex2f(x + r * cosf(angle), y + r * sinf(angle));
		}
		glEnd();
	}
	else if (H::cards_mas[i] == 1) { //шестиугольник
		draw_painted_rect(x, y, 2, 2, "", 0.1, 1, 0.5, 2.5, 0.5, 0, 0.1);
		int pointCount1 = 6;
		const float step1 = float(2 * M_PI / pointCount1), r1 = 0.7;
		glLineWidth(2.5);
		glBegin(GL_LINE_LOOP);
		glColor3f(0.1, 0.3, 0.1);
		for (float angle = 0; angle < float(2 * M_PI); angle += step1) {
			glVertex2f(x + r1 * cosf(angle), y + r1 * sinf(angle));
		}
		glEnd();
	}
	else if (H::cards_mas[i] == 2) { //квадрат
		draw_painted_rect(x, y, 2, 2, "", 1, 1, 0.7, 2.5, 0.5, 0, 0.1);
		double wid = 0.5, high = 0.5;
		glLineWidth(2.5);
		glBegin(GL_LINE_LOOP);
		glColor3f(0.7, 0, 0.2);

		glVertex2f(x - wid, y - high);
		glVertex2f(x - wid, y + high);

		glVertex2f(x + wid, y + high);
		glVertex2f(x + wid, y - high);
		glEnd();
	}
	else if (H::cards_mas[i] == 3) { //ромб
		draw_painted_rect(x, y, 2, 2, "", 1, 0.6, 1, 2.5, 0.5, 0, 0.1);
		double wid = 0.7, high = 0.7;
		glLineWidth(2.5);
		glBegin(GL_LINE_LOOP);
		glColor3f(0.5, 0, 0.4);

		glVertex2f(x, y - high);
		glVertex2f(x - wid, y );

		glVertex2f(x, y + high);
		glVertex2f(x + wid, y);
		glEnd();
	}
	else if (H::cards_mas[i] == 4) { //крест
		draw_painted_rect(x, y, 2, 2, "", 0.3, 1, 0.8, 2.5, 0.5, 0, 0.1);
		double wid = 0.6, high = 0.6;
		glLineWidth(2.5);
		glBegin(GL_LINES);
		glColor3f(0, 0.1, 0.3);

		glVertex2f(x - wid, y - high);
		glVertex2f(x + wid, y + high);

		glVertex2f(x - wid, y + high);
		glVertex2f(x + wid, y - high);
		glEnd();
	}
	else if (H::cards_mas[i] == 5) { //треугольник
		draw_painted_rect(x, y, 2, 2, "", 0.5, 1, 0.5, 2.5, 0.5, 0, 0.1);
		glLineWidth(2.5);
		glBegin(GL_LINE_LOOP);
		glColor3f(0.5, 0.1, 0);
		glVertex2f(x, y + 0.5);
		glVertex2f(x + 0.5, y - 0.4);
		glVertex2f(x - 0.5, y - 0.4);
		glEnd();
	}
	else if (H::cards_mas[i] == 6) { //сердце
		draw_painted_rect(x, y, 2, 2, "", 0.7, 0.9, 1, 2.5, 0.5, 0, 0.1);
		glLineWidth(2.5);
		glBegin(GL_LINE_LOOP);
		glColor3f(0.3, 0, 0.5);
		glVertex2f(x, y + 0.2);
		glVertex2f(x + 0.45, y + 0.5);
		glVertex2f(x + 0.7, y );
		glVertex2f(x, y - 0.7);
		glVertex2f(x - 0.7, y );
		glVertex2f(x - 0.45, y + 0.5);
		glEnd();
	}
	else if (H::cards_mas[i] == 7) { //решетка
		draw_painted_rect(x, y, 2, 2, "", 1, 0.6, 0.7, 2.5, 0.5, 0, 0.1);
		double w = 0.7, m=0.2;
		glLineWidth(2.5);
		glBegin(GL_LINES);
		glColor3f(0.4, 0.1, 0.3);

		glVertex2f(x - m, y - w);
		glVertex2f(x -m, y + w);

		glVertex2f(x +m, y -w);
		glVertex2f(x +m, y +w);

		glVertex2f(x -w, y - m);
		glVertex2f(x + w, y -m);

		glVertex2f(x - w, y + m);
		glVertex2f(x + w, y +m);
		glEnd();
	}
	glFlush();
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT);
	draw_pole();

	switch (currentMenuState) {
	case MENU:
		draw_painted_rect(0, 0, 2.8, 2.8, "", 0.5, 0, 0.1, 2);
		H::button_mas[0].drawButton(1, 1, 1, 1, 0, 0, 0, 0.12, 0.15);
		H::button_mas[1].drawButton(1, 1, 1, 1, 0, 0, 0, 0.24, 0.15);
		break;
		/*case PAUSE:
			draw_painted_rect(0, 0, 2.8, 2.8, "", 0.5, 0, 0.1, 2);
			H::button_mas[2].drawButton(1, 1, 1, 1, 0, 0, 0, 0.12, 0.15);
			H::button_mas[3].drawButton(1, 1, 1, 1, 0, 0, 0, 0.24, 0.15);
			H::button_mas[4].drawButton(1, 1, 1, 1, 0, 0, 0, 0.54, 0.15);
			break;*/
			/*case PLAYPL1:
				draw_card(H::cur_num_pl1);
				break;
			*/
	}
	glutSwapBuffers();
}

void MousePressed(int button, int state, int x, int y) {
	double x0 = (x - 350) / 350. * 4;
	double y0 = -(y - 350) / 350. * 4;
	Point xy(x0, y0);
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
		switch (currentMenuState) {
		case MENU:
			if (H::button_mas[0].isButtonHovered(xy)) {
				currentMenuState = PLAY;
				display();
			}
			else if (H::button_mas[1].isButtonHovered(xy)) {
				exit(0);
			}
			break;
		case PAUSE:
			if (H::button_mas[2].isButtonHovered(xy)) {
				currentMenuState = pastMenuState;
				display();
			}
			else if (H::button_mas[3].isButtonHovered(xy)) {
				currentMenuState = PLAY;
				display();
			}
			else if (H::button_mas[4].isButtonHovered(xy)) {
				exit(0);
			}
			break;
		case PLAY:
			for (int i = 0; i < 16; ++i) {
				if (H::plitki[i].isButtonHovered(xy)) {
					H::cur_num_pl1 = i;
					draw_card(H::cur_num_pl1);
					currentMenuState = PLAYPL1;
					//display();
					break;
				}
			}
		case PLAYPL1:
			for (int i = 0; i < 16; ++i) {
				if (H::plitki[i].isButtonHovered(xy) && H::cur_num_pl1!=i) {
					H::cur_num_pl2 = i;
					draw_card(H::cur_num_pl2);
					if (H::cards_mas[H::cur_num_pl1] == H::cards_mas[H::cur_num_pl2]) {
						H::open_cards_mas[H::cur_num_pl1] = 1;
						H::open_cards_mas[H::cur_num_pl1] = 2;
					}
					currentMenuState = PLAY;
					//display();
					break;
				}
			}
		}

	}
}

void keyboard(unsigned char key, int x, int y){
	if (currentMenuState == PLAY || currentMenuState == PLAYPL1 || currentMenuState == PLAYPL2) {
		if (key == 32) {
			pastMenuState = currentMenuState;
			currentMenuState = PAUSE;
			draw_painted_rect(0, 0, 2.8, 2.8, "", 0.5, 0, 0.1, 2);
			H::button_mas[2].drawButton(1, 1, 1, 1, 0, 0, 0, 0.12, 0.15);
			H::button_mas[3].drawButton(1, 1, 1, 1, 0, 0, 0, 0.24, 0.15);
			H::button_mas[4].drawButton(1, 1, 1, 1, 0, 0, 0, 0.54, 0.15);
		}
	}
}



void timer(int) {
	display();
	glutTimerFunc(100, timer, 0);
}

int main(int argc, char** argv) {
	setlocale(LC_ALL, "rus");
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); // GLUT_DOUBLE GLUT_SINGLE
	glutInitWindowSize(700, 700);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("");
	glClearColor(1, 0.85, 0.7, 1);
	glMatrixMode(GL_PROJECTION);
	glOrtho(-4, 4, -4, 4, -4, 1);

	set_button();

	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutMouseFunc(MousePressed);
	//glutTimerFunc(100, timer, 0);
	glutMainLoop();

	return 0;
}
